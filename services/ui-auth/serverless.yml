# Refer to the README.md file in within this service directory to configure all ssm parameters required for this service.
service: ui-auth

frameworkVersion: "4"

package:
  individually: true

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stackTags:
    PROJECT: ${self:custom.project}
    SERVICE: ${self:service}
  iam:
    role:
      path: /delegatedadmin/developer/
      permissionsBoundary: !Sub arn:aws:iam::${AWS::AccountId}:policy/cms-cloud-admin/developer-boundary-policy
      statements:
        - Effect: "Allow"
          Action:
            - "*"
          Resource: !GetAtt CognitoUserPool.Arn

plugins:
  - serverless-stack-termination-protection
  - serverless-plugin-scripts
  - serverless-iam-helper
  - "@enterprise-cmcs/serverless-waf-plugin"

custom:
  project: "qmr"
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  wafPlugin:
    name: ${self:service}-${self:custom.stage}-webacl-waf
  wafExcludeRules:
    awsCommon:
      - "SizeRestrictions_BODY"
  serverlessTerminationProtection:
    stages:
      - nonsense
  attachments_bucket_arn: ${param:AttachmentsBucketArn}
  api_gateway_rest_api_name: ${param:ApiGatewayRestApiName}
  okta_metadata_url: ${ssm:/configuration/${self:custom.stage}/okta_metadata_url, ""}
  application_endpoint_url: ${param:ApplicationEndpointUrl}
  bootstrapUsersEnabled: ${ssm:/configuration/${self:custom.stage}/cognito/bootstrapUsers/enabled, ssm:/configuration/default/cognito/bootstrapUsers/enabled, ""}
  bootstrapUsersPassword: ${ssm:/configuration/${self:custom.stage}/cognito/bootstrapUsers/password, ssm:/configuration/default/cognito/bootstrapUsers/password, ""}
  scripts:
    hooks:
      deploy:finalize: |
        if [ "${self:custom.bootstrapUsersEnabled}" = "true" ];
        then
          aws lambda invoke --region ${self:provider.region} --function-name ${self:service}-${self:custom.stage}-bootstrapUsers --invocation-type RequestResponse /dev/null
        fi

functions:
  bootstrapUsers:
    handler: handlers/createUsers.handler
    environment:
      userPoolId: !Ref CognitoUserPool
      bootstrapUsersPassword: ${self:custom.bootstrapUsersPassword}
    timeout: 60

resources:
  Conditions:
    BackWithOkta:
      Fn::Not:
        - Fn::Equals:
            - ""
            - ${self:custom.okta_metadata_url}
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      DeletionPolicy: Retain
      Properties:
        UserPoolName: ${self:custom.stage}-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: given_name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: family_name
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: cms_roles
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: cms_state
            AttributeDataType: String
            Mutable: true
            Required: false
            StringAttributeConstraints:
              MinLength: 0
              MaxLength: 256
        AdminCreateUserConfig:
          AllowAdminCreateUserOnly: True # This setting disables self sign-up for users
        UserPoolAddOns:
          AdvancedSecurityMode: ENFORCED
        UserPoolTags:
          Name: ${self:custom.stage}-user-pool

    # Associate the WAF Web ACL with the Cognito User Pool
    CognitoUserPoolWAFAssociation:
      Type: "AWS::WAFv2::WebACLAssociation"
      Properties:
        ResourceArn: !GetAtt CognitoUserPool.Arn
        WebACLArn: !GetAtt WafPluginAcl.Arn

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.stage}-user-pool-client
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false # pragma: allowlist secret
        AllowedOAuthFlows:
          - code
          - implicit
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthScopes:
          - email
          - openid
          - profile
        CallbackURLs:
          - ${self:custom.application_endpoint_url}
          - http://localhost:3000/
        DefaultRedirectURI: ${self:custom.application_endpoint_url}
        LogoutURLs:
          - ${self:custom.application_endpoint_url}
          - "${self:custom.application_endpoint_url}postLogout"
          - http://localhost:3000/
          - http://localhost:3000/postLogout
        SupportedIdentityProviders:
          - Fn::If:
              - BackWithOkta
              - !Ref OktaUserPoolIdentityProvider
              - COGNITO
        AccessTokenValidity: ${ssm:/configuration/${self:custom.stage}/accessTokenValidity, 12}
        IdTokenValidity: ${ssm:/configuration/${self:custom.stage}/idTokenValidity, 12}
        TokenValidityUnits:
          AccessToken: hours
          IdToken: hours
    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain:
          Fn::Join:
            - ""
            - - ${self:custom.stage}-login-
              - Ref: CognitoUserPoolClient
        UserPoolId:
          Ref: CognitoUserPool
    OktaUserPoolIdentityProvider:
      Condition: BackWithOkta
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        AttributeMapping:
          email: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
          given_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname
          family_name: http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname
          custom:cms_roles: cmsRoles
          custom:cms_state: state
        IdpIdentifiers:
          - IdpIdentifier
        ProviderDetails:
          MetadataURL: ${self:custom.okta_metadata_url}
        ProviderName: Okta
        ProviderType: SAML
        UserPoolId:
          Ref: CognitoUserPool
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${self:custom.stage}IdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId: !Ref CognitoUserPoolClient
            ProviderName: !GetAtt CognitoUserPool.ProviderName
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId: !Ref CognitoIdentityPool
        Roles:
          authenticated: !GetAtt CognitoAuthRole.Arn
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
              Condition:
                StringEquals:
                  "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
                "ForAnyValue:StringLike":
                  "cognito-identity.amazonaws.com:amr": authenticated
        Policies:
          - PolicyName: "CognitoAuthorizedPolicy"
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "kms:Encrypt"
                    - "kms:Decrypt"
                    - "kms:ReEncrypt*"
                    - "kms:GenerateDataKey*"
                    - "kms:DescribeKey"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "mobileanalytics:PutEvents"
                    - "cognito-sync:*"
                    - "cognito-identity:*"
                  Resource: "*"
                - Effect: "Allow"
                  Action:
                    - "execute-api:Invoke"
                  Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${self:custom.api_gateway_rest_api_name}/*
                - Effect: "Allow"
                  Action:
                    - "s3:*"
                  Resource:
                    # Must use Join here.  See: https://github.com/serverless/serverless/issues/3565
                    - Fn::Join:
                        - ""
                        - - ${self:custom.attachments_bucket_arn}
                          - "/public/*"
  Outputs:
    UserPoolId:
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Value: !Ref CognitoUserPoolClient
    UserPoolClientDomain:
      Value: !Sub ${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
    IdentityPoolId:
      Value: !Ref CognitoIdentityPool
    Region:
      Value: !Sub ${AWS::Region}
